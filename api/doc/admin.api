syntax = "v1"

info(
	desc: "用户相关"
	author: "nick"
	email: ""
)

type (
	loginReq {
		UserName string `json:"userName"`
		Password string `json:"password"`
	}
	loginResp {
		Status           string `json:"status"`
		CurrentAuthority string `json:"currentAuthority"`
		UserName         string `json:"userName"`
		AccessToken      string `json:"token"`
		AccessExpire     int64  `json:"accessExpire"`
		RefreshAfter     int64  `json:"refreshAfter"`
	}

	AdminRole {
		Name string `json:"name"` // 角色名
		Slug string `json:"slug"` // 角色标识
	}
	AdminPermission {
		Id          int32  `json:"id"`          //
		ParentId    int32  `json:"parent_id"`   // 上级菜单ID
		Name        string `json:"name"`        // 菜单名称
		Icon        string `json:"icon"`        // 菜单图标
		Rule        string `json:"rule"`        // 菜单路径
		Description string `json:"description"` // 菜单描述
	}

	userInfoResp {
		Avatar          string             `json:"avatar"`
		Name            string             `json:"name"`
		NickName        string             `json:"nickName"`
		Email           string             `json:"email"`
		Mobile          string             `json:"mobile"`
		CreatedAt       int64              `json:"created_at"`
		AdminRole       []*AdminRole       `json:"admin_role"`
		AdminPermission []*AdminPermission `json:"admin_permission"`
	}
)

@server(
	jwt: Auth
	middleware: CheckUrl
	group: sys/user
	prefix: /api/sys/user
)
service admin-api {
	@handler UserInfo
	get /currentUser returns (userInfoResp)
	
	@handler Add
	get /addUser returns (userInfoResp)
}

@server(
	group: sys/user
)
service admin-api {
	@handler UserLogin
	post /api/sys/user/login (loginReq) returns (loginResp)
}