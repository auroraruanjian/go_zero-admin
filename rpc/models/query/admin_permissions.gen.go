// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-demo/rpc/models/adminmodel"
)

func newAdminPermission(db *gorm.DB, opts ...gen.DOOption) adminPermission {
	_adminPermission := adminPermission{}

	_adminPermission.adminPermissionDo.UseDB(db, opts...)
	_adminPermission.adminPermissionDo.UseModel(&adminmodel.AdminPermission{})

	tableName := _adminPermission.adminPermissionDo.TableName()
	_adminPermission.ALL = field.NewAsterisk(tableName)
	_adminPermission.Id = field.NewInt64(tableName, "id")
	_adminPermission.ParentId = field.NewInt64(tableName, "parent_id")
	_adminPermission.Name = field.NewString(tableName, "name")
	_adminPermission.Icon = field.NewString(tableName, "icon")
	_adminPermission.Rule = field.NewString(tableName, "icon")
	_adminPermission.Description = field.NewString(tableName, "description")
	_adminPermission.CreatedAt = field.NewTime(tableName, "created_at")
	_adminPermission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_adminPermission.AdminRole = adminPermissionManyToManyAdminRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AdminRole", "adminmodel.AdminRole"),
		AdminUser: struct {
			field.RelationField
			AdminRole struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("AdminRole.AdminUser", "adminmodel.AdminUser"),
			AdminRole: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AdminRole.AdminUser.AdminRole", "adminmodel.AdminRole"),
			},
		},
		AdminPermission: struct {
			field.RelationField
			AdminRole struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("AdminRole.AdminPermission", "adminmodel.AdminPermission"),
			AdminRole: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AdminRole.AdminPermission.AdminRole", "adminmodel.AdminRole"),
			},
		},
	}

	_adminPermission.fillFieldMap()

	return _adminPermission
}

type adminPermission struct {
	adminPermissionDo

	ALL         field.Asterisk
	Id          field.Int64
	ParentId    field.Int64
	Name        field.String
	Icon        field.String
	Rule        field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	AdminRole   adminPermissionManyToManyAdminRole

	fieldMap map[string]field.Expr
}

func (a adminPermission) Table(newTableName string) *adminPermission {
	a.adminPermissionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminPermission) As(alias string) *adminPermission {
	a.adminPermissionDo.DO = *(a.adminPermissionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminPermission) updateTableName(table string) *adminPermission {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewInt64(table, "id")
	a.ParentId = field.NewInt64(table, "parent_id")
	a.Name = field.NewString(table, "name")
	a.Icon = field.NewString(table, "icon")
	a.Rule = field.NewString(table, "icon")
	a.Description = field.NewString(table, "description")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminPermission) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.Id
	a.fieldMap["parent_id"] = a.ParentId
	a.fieldMap["name"] = a.Name
	a.fieldMap["icon"] = a.Icon
	a.fieldMap["icon"] = a.Rule
	a.fieldMap["description"] = a.Description
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt

}

func (a adminPermission) clone(db *gorm.DB) adminPermission {
	a.adminPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminPermission) replaceDB(db *gorm.DB) adminPermission {
	a.adminPermissionDo.ReplaceDB(db)
	return a
}

type adminPermissionManyToManyAdminRole struct {
	db *gorm.DB

	field.RelationField

	AdminUser struct {
		field.RelationField
		AdminRole struct {
			field.RelationField
		}
	}
	AdminPermission struct {
		field.RelationField
		AdminRole struct {
			field.RelationField
		}
	}
}

func (a adminPermissionManyToManyAdminRole) Where(conds ...field.Expr) *adminPermissionManyToManyAdminRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a adminPermissionManyToManyAdminRole) WithContext(ctx context.Context) *adminPermissionManyToManyAdminRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a adminPermissionManyToManyAdminRole) Session(session *gorm.Session) *adminPermissionManyToManyAdminRole {
	a.db = a.db.Session(session)
	return &a
}

func (a adminPermissionManyToManyAdminRole) Model(m *adminmodel.AdminPermission) *adminPermissionManyToManyAdminRoleTx {
	return &adminPermissionManyToManyAdminRoleTx{a.db.Model(m).Association(a.Name())}
}

type adminPermissionManyToManyAdminRoleTx struct{ tx *gorm.Association }

func (a adminPermissionManyToManyAdminRoleTx) Find() (result []*adminmodel.AdminRole, err error) {
	return result, a.tx.Find(&result)
}

func (a adminPermissionManyToManyAdminRoleTx) Append(values ...*adminmodel.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a adminPermissionManyToManyAdminRoleTx) Replace(values ...*adminmodel.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a adminPermissionManyToManyAdminRoleTx) Delete(values ...*adminmodel.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a adminPermissionManyToManyAdminRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a adminPermissionManyToManyAdminRoleTx) Count() int64 {
	return a.tx.Count()
}

type adminPermissionDo struct{ gen.DO }

type IAdminPermissionDo interface {
	gen.SubQuery
	Debug() IAdminPermissionDo
	WithContext(ctx context.Context) IAdminPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminPermissionDo
	WriteDB() IAdminPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminPermissionDo
	Not(conds ...gen.Condition) IAdminPermissionDo
	Or(conds ...gen.Condition) IAdminPermissionDo
	Select(conds ...field.Expr) IAdminPermissionDo
	Where(conds ...gen.Condition) IAdminPermissionDo
	Order(conds ...field.Expr) IAdminPermissionDo
	Distinct(cols ...field.Expr) IAdminPermissionDo
	Omit(cols ...field.Expr) IAdminPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IAdminPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionDo
	Group(cols ...field.Expr) IAdminPermissionDo
	Having(conds ...gen.Condition) IAdminPermissionDo
	Limit(limit int) IAdminPermissionDo
	Offset(offset int) IAdminPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionDo
	Unscoped() IAdminPermissionDo
	Create(values ...*adminmodel.AdminPermission) error
	CreateInBatches(values []*adminmodel.AdminPermission, batchSize int) error
	Save(values ...*adminmodel.AdminPermission) error
	First() (*adminmodel.AdminPermission, error)
	Take() (*adminmodel.AdminPermission, error)
	Last() (*adminmodel.AdminPermission, error)
	Find() ([]*adminmodel.AdminPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*adminmodel.AdminPermission, err error)
	FindInBatches(result *[]*adminmodel.AdminPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*adminmodel.AdminPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminPermissionDo
	Assign(attrs ...field.AssignExpr) IAdminPermissionDo
	Joins(fields ...field.RelationField) IAdminPermissionDo
	Preload(fields ...field.RelationField) IAdminPermissionDo
	FirstOrInit() (*adminmodel.AdminPermission, error)
	FirstOrCreate() (*adminmodel.AdminPermission, error)
	FindByPage(offset int, limit int) (result []*adminmodel.AdminPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminPermissionDo) Debug() IAdminPermissionDo {
	return a.withDO(a.DO.Debug())
}

func (a adminPermissionDo) WithContext(ctx context.Context) IAdminPermissionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminPermissionDo) ReadDB() IAdminPermissionDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminPermissionDo) WriteDB() IAdminPermissionDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminPermissionDo) Session(config *gorm.Session) IAdminPermissionDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminPermissionDo) Clauses(conds ...clause.Expression) IAdminPermissionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminPermissionDo) Returning(value interface{}, columns ...string) IAdminPermissionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminPermissionDo) Not(conds ...gen.Condition) IAdminPermissionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminPermissionDo) Or(conds ...gen.Condition) IAdminPermissionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminPermissionDo) Select(conds ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminPermissionDo) Where(conds ...gen.Condition) IAdminPermissionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminPermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAdminPermissionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a adminPermissionDo) Order(conds ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminPermissionDo) Distinct(cols ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminPermissionDo) Omit(cols ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminPermissionDo) Join(table schema.Tabler, on ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminPermissionDo) Group(cols ...field.Expr) IAdminPermissionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminPermissionDo) Having(conds ...gen.Condition) IAdminPermissionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminPermissionDo) Limit(limit int) IAdminPermissionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminPermissionDo) Offset(offset int) IAdminPermissionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminPermissionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminPermissionDo) Unscoped() IAdminPermissionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminPermissionDo) Create(values ...*adminmodel.AdminPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminPermissionDo) CreateInBatches(values []*adminmodel.AdminPermission, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminPermissionDo) Save(values ...*adminmodel.AdminPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminPermissionDo) First() (*adminmodel.AdminPermission, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*adminmodel.AdminPermission), nil
	}
}

func (a adminPermissionDo) Take() (*adminmodel.AdminPermission, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*adminmodel.AdminPermission), nil
	}
}

func (a adminPermissionDo) Last() (*adminmodel.AdminPermission, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*adminmodel.AdminPermission), nil
	}
}

func (a adminPermissionDo) Find() ([]*adminmodel.AdminPermission, error) {
	result, err := a.DO.Find()
	return result.([]*adminmodel.AdminPermission), err
}

func (a adminPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*adminmodel.AdminPermission, err error) {
	buf := make([]*adminmodel.AdminPermission, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminPermissionDo) FindInBatches(result *[]*adminmodel.AdminPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminPermissionDo) Attrs(attrs ...field.AssignExpr) IAdminPermissionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminPermissionDo) Assign(attrs ...field.AssignExpr) IAdminPermissionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminPermissionDo) Joins(fields ...field.RelationField) IAdminPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminPermissionDo) Preload(fields ...field.RelationField) IAdminPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminPermissionDo) FirstOrInit() (*adminmodel.AdminPermission, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*adminmodel.AdminPermission), nil
	}
}

func (a adminPermissionDo) FirstOrCreate() (*adminmodel.AdminPermission, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*adminmodel.AdminPermission), nil
	}
}

func (a adminPermissionDo) FindByPage(offset int, limit int) (result []*adminmodel.AdminPermission, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminPermissionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminPermissionDo) Delete(models ...*adminmodel.AdminPermission) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminPermissionDo) withDO(do gen.Dao) *adminPermissionDo {
	a.DO = *do.(*gen.DO)
	return a
}
